import re
import numpy as np
import bezier
import argparse

class SeqNode:
    def __init__(self):
        self.type = ''
        self.x1 = 0.0
        self.y1 = 0.0
        self.x2 = 0.0
        self.y2 = 0.0
        self.x3 = 0.0
        self.y3 = 0.0
        self.x4 = 0.0
        self.y4 = 0.0

def SeqNode2Curve(cmd):
    if cmd.type == 'L':
        coords = np.zeros((2,2))
        coords[0][0] = cmd.x1
        coords[1][0] = cmd.y1
        coords[0][1] = cmd.x4
        coords[1][1] = cmd.y4
        curve = bezier.Curve(coords, degree=1)
    if cmd.type == 'C':
        coords = np.zeros((2,4))
        coords[0][0] = cmd.x1
        coords[1][0] = cmd.y1
        coords[0][1] = cmd.x2
        coords[1][1] = cmd.y2
        coords[0][2] = cmd.x3
        coords[1][2] = cmd.y3
        coords[0][3] = cmd.x4
        coords[1][3] = cmd.y4
        curve = bezier.Curve(coords, degree=3)
    return curve

def Curve2SeqNode(curve):
    coords = curve.nodes
    cmd =  SeqNode()
    if coords.shape[1] == 2:
        cmd.type = 'L'
        cmd.x1 = coords[0][0]
        cmd.y1 = coords[1][0]
        cmd.x4 = coords[0][1]
        cmd.y4 = coords[1][1]
        return cmd
    if coords.shape[1] == 4:
        cmd.type = 'C'
        cmd.x1 = coords[0][0]
        cmd.y1 = coords[1][0]
        cmd.x2 = coords[0][1]
        cmd.y2 = coords[1][1]
        cmd.x3 = coords[0][2]
        cmd.y3 = coords[1][2]
        cmd.x4 = coords[0][3]
        cmd.y4 = coords[1][3]
        return cmd

def draw_pic(commands, draw_path):
    import seaborn
    import matplotlib.pyplot as plt

    seaborn.set()
    curve = SeqNode2Curve(commands[1])
    ax = curve.plot(num_pts=256)
    for cmd in commands:
        if cmd.type != 'M':
            curve = SeqNode2Curve(cmd)

            ax = curve.plot(num_pts=256, ax=ax)
    plt.gca().invert_yaxis()
    plt.savefig(draw_path)
    print('finished')

def main():
    parser = argparse.ArgumentParser(description="draw svg onlines")
    parser.add_argument('--char_class', type=str, default='A')
    opts = parser.parse_args()
    char_class = opts.char_class

    fin = open(f'target_svg/149_2/{char_class}.svg','r')
    svgs = fin.read().split('d="')

    svg = svgs[1]
    path = svg.split('" stroke-width=')[0]
    #path = 'M 8.121042966842651 10.409844160079956 L 17.455036640167236 10.73832893371582 L 16.869277954101562 12.670795440673828 L 12.734624862670898 19.15611505508423 L 16.194414138793945 18.999658584594727 L 15.706546783447266 22.687926292419434 L 5.936687350273132 22.687803268432617 L 7.024005889892578 20.308846950531006 C 8.489898920059204 18.52262306213379 10.807527780532837 14.314640522003174 11.564495086669922 13.934098720550537 C 12.973402976989746 14.416450023651123 11.582767009735107 14.248053073883057 7.6958112716674805 14.121070861816406 L 8.121042966842651 10.409844160079956'
    #path = 'M 10.282778978347778 10.326509714126587 C 11.500396728515625 10.251445055007935 12.021497726440430 10.236073493957520 13.229563236236572 11.308806896209717 L 13.659184455871582 10.677711009979248 L 16.769233703613281 10.708892583847046 L 16.763394355773926 23.579875946044922 C 16.380270481109619 25.598856925964355 14.166011810302734 28.093708992004395 11.717524766921997 28.070397377014160 C 9.506624937057495 27.856407165527344 8.053142309188843 26.417730331420898 7.996302366256714 26.455521583557129 L 9.137716054916382 24.105271339416504 C 9.245078802108765 24.721372604370117 10.236705780029297 25.048662185668945 11.172037839889526 24.306827545166016 C 12.826465129852295 24.240137100219727 13.023126125335693 23.114836692810059 12.554845333099365 21.282045364379883 L 13.577337741851807 21.173556804656982 C 12.963513851165771 21.096699714660645 12.189697265625000 22.496731281280518 9.961624860763550 22.769591331481934 C 7.236831665039062 22.005892753601074 6.864185571670532 20.652322769165039 6.678117513656616 16.464200019836426 C 6.716986656188965 12.798591613769531 7.386951684951782 10.847637891769409 10.282778978347778 10.326509714126587 M 11.717290163040161 13.306908130645752 C 10.761312961578369 13.207965373992920 10.467882871627808 13.144964218139648 10.547195434570312 16.119260787963867 C 10.713300704956055 18.389961719512939 10.562139987945557 19.203283309936523 11.487819671630859 19.259440898895264 C 12.521391391754150 19.360984325408936 12.998062133789062 18.002411842346191 12.749094486236572 15.551603794097900 C 12.642572879791260 14.065764427185059 12.978076457977295 13.480638027191162 11.717290163040161 13.306908130645752'
    #path = 'M 12.323039531707764 5.189197182655334 C 14.402445316314697 5.111477136611938 14.883655071258545 5.645477414131165 17.331586360931396 5.642266631126404 C 18.177141666412354 6.032785177230835 18.005996704101562 6.095400094985962 17.577252388000488 11.265163421630859 C 15.164794921875000 9.489192724227905 15.625372409820557 8.253829479217529 12.707442283630371 7.886338949203491 C 11.095468282699585 7.844888448715210 10.444813013076782 9.413522958755493 10.423435449600220 9.553117275238037 C 10.057990550994873 10.102736234664917 9.382930755615234 11.851404905319214 9.539275646209717 14.049372196197510 C 9.711694478988647 15.936884880065918 9.465100049972534 17.816984653472900 9.611721754074097 14.914180755615234 C 9.636739969253540 16.200181961059570 10.248320817947388 17.435018062591553 10.985774517059326 18.329958915710449 C 10.993226554111709 18.344880864863370 11.000651663754436 18.359736489027188 11.008052551316842 18.374525910611549 C 11.008052551316847 18.374525910611549 11.008052551316847 18.374525910611549 11.008052551316847 18.374525910611549 C 12.403669209780393 19.334458502488960 13.863656783423323 20.403266705410882 13.529628753662109 16.169044017791748 C 11.953996524163907 15.934884775786122 12.055738320895475 15.666329972948240 12.038293014503209 15.232410937885561 C 11.956176251151508 15.259037274842552 11.762250256767270 15.181835544737874 11.592576298153334 15.084036552725589 C 11.592576298153336 15.084036552725591 11.592576298153336 15.084036552725591 11.592576298153336 15.084036552725591 C 12.547107754996548 15.643324078518468 11.784979710939854 14.530545455329698 11.994144916534424 13.769026279449463 C 14.655832725132157 13.861334928957278 13.731125310521055 13.793778849668483 18.968094111898679 13.603184572706182 C 19.208871125457499 13.645222667789469 19.452636556089576 13.689644325489761 19.624654769897461 13.725308418273926 C 19.372879028320312 16.387571811676025 18.811909675598145 14.225167751312256 19.064968585968018 18.425285339355469 C 19.049683570861816 19.702567577362061 19.520286083221436 20.724905490875244 19.385383129119873 21.855540275573730 C 16.420179567805473 21.506921500226891 17.217436306948365 22.860725161476047 13.492586826847134 22.865861636958606 C 13.464602911063512 22.971426361892313 13.436159600801517 23.006426145072062 13.406423091888428 22.940052509307861 C 12.238291740417480 23.103318214416504 10.557665348052979 23.058072566986084 8.588512659072876 22.208933830261230 C 7.526747703552246 21.634815216064453 5.697987914085388 20.547550678253174 4.897141098976135 18.372071743011475 C 4.478806775224024 17.369976948710573 4.252021209706344 16.305359763921935 4.146159085126972 15.654305871774888 C 3.982613903882839 13.095649377809352 4.462912409961540 10.711553758725067 5.907476305961609 8.435254096984863 C 6.996854782104492 6.487248659133911 9.781155109405518 5.587427616119385 11.896684169769287 5.187953352928162 L 12.323039531707764 5.189197182655334'
    path_splited = re.split(r"([MLC])", path)
    commands = []
    cur_x = 0.0
    cur_y = 0.0
    path_splited = path_splited[1:]
    for idx in range(0,len(path_splited)):

        if path_splited[idx] == 'M':
            coords_str = path_splited[idx+1]
            cmd = SeqNode()
            cmd.type = 'M'
            cmd.x4 = float(coords_str.split(' ')[1])
            cmd.y4 = float(coords_str.split(' ')[2])
            cur_x = cmd.x4
            cur_y = cmd.y4
            commands.append(cmd)
        if path_splited[idx] == 'L':
            coords_str = path_splited[idx+1]
            cmd = SeqNode()
            cmd.type = 'L'
            cmd.x1 = cur_x
            cmd.y1 = cur_y
            cmd.x4 = float(coords_str.split(' ')[1])
            cmd.y4 = float(coords_str.split(' ')[2])
            cur_x = cmd.x4
            cur_y = cmd.y4
            commands.append(cmd)
        if path_splited[idx] == 'C':
            coords_str = path_splited[idx+1]
            cmd = SeqNode()
            cmd.type = 'C'

            cmd.x1 = cur_x
            cmd.y1 = cur_y
            cmd.x2 = float(coords_str.split(' ')[1])
            cmd.y2 = float(coords_str.split(' ')[2])
            cmd.x3 = float(coords_str.split(' ')[3])
            cmd.y3 = float(coords_str.split(' ')[4])
            cmd.x4 = float(coords_str.split(' ')[5])
            cmd.y4 = float(coords_str.split(' ')[6])
            cur_x = cmd.x4
            cur_y = cmd.y4
            commands.append(cmd)

    draw_pic(commands,f'draw_svg_outlines/149_2/target_svg/{char_class}.svg')

if __name__ == '__main__':
    main()
